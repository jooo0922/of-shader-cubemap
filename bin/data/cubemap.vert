#version 410

// layout 을 이용해서 버텍스 셰이더에서 각 버텍스 데이터가 저장된 순서를 알려줌. (오픈프레임웍스가 버텍스 데이터를 저장하는 순서는 p.74 참고)
layout(location = 0) in vec3 pos;

uniform mat4 mvp; // c++ (오픈프레임웍스)에서 합쳐준 투영 * 뷰 * 모델 행렬을 전달받는 유니폼 변수
out vec3 fromCam;

void main() {
  /*
    cube.ply 의 오브젝트 공간의 버텍스를 프래그먼트 셰이더로
    바로 보간해서 내보내고 있음. 

    왜 월드좌표로 변환하지 않고 그냥 내보낸걸까?

    일단, 이 예제에서는 실제로 카마레가 큐브 바깥에 있지만,
    가상의 카메라가 큐브 안쪽 가운데(즉, 원점)에 있다고 가정함.

    이런 상황에서, 책에서도 봤듯이 프래그먼트 셰이더에서는
    원점에 있는 카메라(또는 메쉬)가 큐브맵의 어느 방향을 바라보느냐를 의미하는
    '방향 벡터'를 이용해서 큐브맵 샘플링을 한다고 했지?

    그렇다면, 메쉬 원점을 기준으로 지정되어 있는 cube.ply의 버텍스 위치들은
    메쉬 원점을 중심으로 큐브맵을 바라보는 '방향벡터' 라고도 할 수 있겠지?

    그렇기 때문에 별도로 월드좌표로 변환하지 않고도,
    메쉬의 오브젝트 공간 원점에서 뻗어나오는 버텍스 위치를
    방향벡터로도 써먹을 수 있기 때문에 그냥 프래그먼트 셰이더로
    보낸 뒤, 보간하여 사용하려는 것임.  
  */
  fromCam = pos;
  gl_Position = mvp * vec4(pos, 1.0); // 동차좌표계로 변환한 버텍스 위치좌표에 mvp 행렬을 곱해서 변환을 처리한 뒤, 최종 버텍스 위치값을 결정함.
}